---
title: "Take-home Exercise 3: Prototyping Modules for Geospatial Analytics Shiny Application (not done)"
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
execute:
  freeze: true
  warning: false
editor: visual
date: "March 16, 2024"
---

# 1 Overview

## 1.1 Background

## 1.2 Objectives

## 1.3 The Task

## 1.4 The Data

## 1.5 Installing and Loading R Packages

In this exercise, the following R packages would be used:

Then, to install and/or load the R packages, we can use p_load() from the pacman package.

```{r}
pacman::p_load(sf, tidyverse, tmap, SpatialAcc, ggplot2, ggstatsplot, sp, spNetwork, reshape2)
```

# 2 Data Preparation (Geospatial)

## 2.1 Data Import

Letâ€™s begin by introducing and preparing our geospatial data set in R!

To import geospatial data, we will be using st_read() from the sf package.

### 2.1.1 Master Plan 2019

```{r}
#| eval: false
mpsz2019 <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaGEOJSON.geojson")
```

```{r}
#| eval: false
#| echo: false
write_rds(mpsz2019, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz2019.rds")
```

```{r}
#| echo: false
mpsz2019 <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz2019.rds")
```

```{r}
mpsz2019
```

From the above, we can see that the mpsz2019 data is a multipolygon data in geodetic CRS WGS84, with Z dimensions.

### 2.1.2 Eldercare services

```{r}
#| eval: false
eldercare_services <- st_read(dsn = "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data",
                              layer = "ELDERCARE")
```

```{r}
#| eval: false
#| echo: false
write_rds(eldercare_services, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_services.rds")
```

```{r}
#| echo: false
eldercare_services <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_services.rds")
```

```{r}
eldercare_services
```

The eldercare_services data set is point data, with dimensions XY and CRS SVY21.

### 2.1.3 Community Gardens 

```{r}
#| eval: false
gardensg <- st_read(dsn = "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/CommunityinBloomCIB.kml")
```

```{r}
#| eval: false
#| echo: false
write_rds(gardensg, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/gardensg.rds")
```

```{r}
#| echo: false
gardensg <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/gardensg.rds")
```

```{r}
gardensg
```
We see that the gardens data set is of point data type, has XYZ dimension, and CRS is WGS84.

### 2.1.4 CHAS clinics

```{r}
chassg <- st_read("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/CHASClinics.geojson")
```

```{r}
#| eval: false
#| echo: false
write_rds(chassg, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chassg.rds")
```

```{r}
#| echo: false
chassg <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chassg.rds")
```

```{r}
chassg
```

We see that the chassg data set is of point data type, has XYZ dimension, and CRS is WGS84.

### 2.1.5 Other amenities (Hospitals, Community Centres, Parks)

```{r}
#| eval: false
other_amenities <- st_read(dsn = "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data",
                              layer = "gis_osm_pois_a_free_1")
```

```{r}
#| eval: false
#| echo: false
write_rds(other_amenities, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/other_amenities.rds")
```

```{r}
#| echo: false
other_amenities <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/other_amenities.rds")
```

```{r}
other_amenities
```

We see that the other_amenities data is point data, with dimensions XY and CRS WGS84.

## 2.2 Visualization of imported data

Let's visualize how it looks like using plot() and st_geometry() from the sf package.

```{r}
#| eval: false
plot(st_geometry(mpsz2019))
```

```{r}
#| eval: false
plot(st_geometry(eldercare_services))
```

```{r}
#| eval: false
plot(st_geometry(gardensg))
```

```{r}
#| eval: false
plot(st_geometry(chassg))
```

```{r}
#| eval: false
plot(st_geometry(other_amenities))
```


## 2.3 Data Pre-Processing

### 2.3.1 Dropping Z-dimension

For mpsz2019, 
```{r}
#| eval: false
mpsz <- st_zm(mpsz2019)
```

```{r}
#| eval: false
#| echo: false
write_rds(mpsz, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz.rds")
```

```{r}
#| echo: false
mpsz <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz.rds")
```

For gardens, 
```{r}
#| eval: false
gardens <- st_zm(gardensg)
```

```{r}
#| eval: false
#| echo: false
write_rds(gardens, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/gardens.rds")
```

```{r}
#| echo: false
gardens <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/gardens.rds")
```

For chassg, 
```{r}
#| eval: false
chas_sg <- st_zm(chassg)
```

```{r}
#| eval: false
#| echo: false
write_rds(chas_sg, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_sg.rds")
```

```{r}
#| echo: false
chas_sg <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_sg.rds")
```

### 2.3.2 Resolving invalid geometries

```{r}
length(which(st_is_valid(mpsz) == FALSE))
```

```{r}
length(which(st_is_valid(eldercare_services) == FALSE))
```

```{r}
length(which(st_is_valid(gardens) == FALSE))
```

```{r}
length(which(st_is_valid(chas_sg) == FALSE))
```

```{r}
length(which(st_is_valid(other_amenities) == FALSE))
```


```{r}
mpsz <- st_make_valid(mpsz)
```

```{r}
length(which(st_is_valid(mpsz) == FALSE))
```

### 2.2.3 Handling missing values

```{r}
mpsz[rowSums(is.na(mpsz)) != 0, ]
```

```{r}
eldercare_services[rowSums(is.na(eldercare_services)) != 0, ]
```

```{r}
eldercare_services[rowSums(is.na(eldercare_services %>% select(11,19))) != 0, ]
```

```{r}
gardens[rowSums(is.na(gardens)) != 0, ]
```

```{r}
chas_sg[rowSums(is.na(chas_sg)) != 0, ]
```

```{r}
other_amenities[rowSums(is.na(other_amenities)) != 0, ]
```

```{r}
other_amenities[rowSums(is.na(other_amenities %>% select(-name))) != 0, ]
```

### 2.3.4 Changing and verifying CRS

```{r}
st_crs(mpsz)
```

The mpsz data set is not in our desired coordinate system (SVY21; EPSG: 3414). Hence, we need to reproject it.

```{r}
st_crs(eldercare_services)
```

The eldercare_services data set does not have the correct EPSG code (3414). Hence, we must reassign the EPSG code to it.

```{r}
st_crs(gardens)
```

```{r}
st_crs(chas_sg)
```

```{r}
st_crs(other_amenities)
```

The garden, chas_sg and other_amenities data sets are also not in our desired coordinate system (SVY21; EPSG: 3414). Hence, we need to reproject them too.

To reproject data sets from one CRS to another CRS, we apply st_transform() as shown in the following three code chunks.
```{r}
#| eval: false
mpszsg <- st_transform(mpsz, 3414)
```

```{r}
#| eval: false
garden <- st_transform(gardens, 3414)
```

```{r}
#| eval: false
chas <- st_transform(chas_sg, 3414)
```

```{r}
#| eval: false
others <- st_transform(other_amenities, 3414)
```

For eldercare_services, we should assign the correct EPSG code using st_set_crs() instead.

```{r}
#| eval: false
eldercare <- st_set_crs(eldercare_services, 3414)
```

```{r}
#| eval: false
#| echo: false
write_rds(garden, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden.rds")
```

```{r}
#| echo: false
garden <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden.rds")
```

### 2.3.6 Extraction of relevant columns

#### 2.3.6.1 Extraction of subzone and planning area names in mpsz_sf

For subzone:

```{r}
#| eval: false
mpszsg <- mpszsg %>%  
  rowwise() %>%
  mutate(SUBZONE= str_extract(`Description`, "<th>SUBZONE_N</th> <td>(.*?)</td>")) %>% ungroup()
```

```{r}
#| eval: false
mpszsg$SUBZONE <- str_remove_all(mpszsg$SUBZONE, "<.*?>|SUBZONE_N")
```

```{r}
#| eval: false
mpszsg$SUBZONE <- str_remove(mpszsg$SUBZONE, "^\\s+")
```


For planning area:

```{r}
#| eval: false
mpszsg <- mpszsg %>%  
  rowwise() %>%
  mutate(PLAN_AREA= str_extract(`Description`, "<th>PLN_AREA_N</th> <td>(.*?)</td>")) %>% ungroup()
```

```{r}
#| eval: false
mpszsg$PLAN_AREA <- str_remove_all(mpszsg$PLAN_AREA, "<.*?>|PLN_AREA_N")
```

```{r}
#| eval: false
mpszsg$PLAN_AREA <- str_remove(mpszsg$PLAN_AREA, "^\\s+")
```


```{r}
#| eval: false
#| echo: false
write_rds(mpszsg, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpszsg.rds")
```

```{r}
#| echo: false
mpszsg <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpszsg.rds")
```

```{r}
head(mpszsg, 10)
```

#### 2.3.6.2 Extraction of CHAS clinic names in chas

```{r}
#| eval: false
chas <- chas %>%  
  rowwise() %>%
  mutate(NAME= str_extract(`Description`, "<th>HCI_NAME</th> <td>(.*?)</td>")) %>% ungroup()
```

```{r}
#| eval: false
chas$NAME <- str_remove_all(chas$NAME, "<.*?>|HCI_NAME|")
```

```{r}
#| eval: false
chas$NAME <- str_remove_all(chas$NAME, "^\\s+")
```

#### 2.3.6.2 Extracting columns

mpsz:

```{r}
#| eval: false
mpszsg <- mpszsg %>% select(3:5)
```

eldercare:

```{r}
#| eval: false
eldercare <- eldercare %>% select(11,19)
```

```{r}
#| eval: false
#| echo: false
write_rds(eldercare, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare.rds")
```

```{r}
#| echo: false
eldercare <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare.rds")
```

```{r}
eldercare
```

chas:

```{r}
#| eval: false
chas <- chas %>% select(3,4)
```

```{r}
#| eval: false
#| echo: false
write_rds(chas, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas.rds")
```

```{r}
#| echo: false
chas <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas.rds")
```

```{r}
chas
```

### 2.3.7 Extraction of study area

#### 2.3.7.1 Extracting Singapore main island boundaries from mpszsg data set

Let's take a look at our mpszsg data set.

```{r}
plot(st_geometry(mpszsg))
```

From the above, we can see that the data set contains geometries of the outer islands of Singapore. In our research, however, we do not need these data as we are focusing on the main island of Singapore.

Hence, to see which what kind of islands there are contained in the data set, we can take a look at what plan areas there are using unique().

```{r}
unique(mpszsg$PLAN_AREA)
```

From here, we can see that the outer islands are classified as " NORTH-EASTERN ISLANDS", " WESTERN ISLANDS", " SOUTHERN ISLANDS" under PLAN_AREA. All other plan areas are in or connected to the main island of Singapore.

To remove these islands from our data set, we can use filter() from the dplyr package and apply the following code chunk, removing records that contain the string "ISLANDS" in the PLAN_AREA column.

```{r}
mpsz_sf <- mpszsg %>% filter(!str_detect(PLAN_AREA, "ISLANDS"))
```

```{r}
plot(st_geometry(mpsz_sf))
```

```{r}
#| eval: false
#| echo: false
write_rds(mpsz_sf, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz_sf.rds")
```

```{r}
#| echo: false
mpsz_sf <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz_sf.rds")
```

Then, to get the boundaries of Singapore main island,

```{r}
#| eval: false
sgboundary_sf <- mpsz_sf %>% st_union
```

```{r}
#| eval: false
#| echo: false
write_rds(sgboundary_sf, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/sgboundary_sf.rds")
```

```{r}
#| echo: false
sgboundary_sf <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/sgboundary_sf.rds")
```

```{r}
#| eval: false
plot(st_geometry(sgboundary_sf))
```

#### 2.2.7.2 Extracting Singapore data from chas data set

From our understanding, chas data set contains one data point at one of Singapore's outer islands. Hence, we want to extract rows that contain only data within Singapore main island. To do so, we use the following code.

```{r}
#| eval: false
chas <- chas[unlist(st_contains(sgboundary_sf, chas)),]
```

```{r}
#| eval: false
#| echo: false
write_rds(chas, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas.rds")
```

```{r}
#| echo: false
chas <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas.rds")
```

```{r}
#| eval: false
plot(st_geometry(chas))
```

#### 2.2.7.2 Extracting Singapore data from others data set

From our understanding, others data set contains the data of other neighbouring countries and islands outside of Singapore main island. Hence, we want to extract rows that contain only data within Singapore main island. To do so, we use the following code.

```{r}
#| eval: false
amenities <- others[unlist(st_contains(sgboundary_sf, others)),]
```

```{r}
#| eval: false
#| echo: false
write_rds(amenities, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/amenities.rds")
```

```{r}
#| echo: false
amenities <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/amenities.rds")
```

```{r}
#| eval: false
plot(st_geometry(amenities))
```

#### 2.3.7.3 Checking of geospatial data sets 

To confirm that all records in our eldercare and garden data sets are within the boundaries of Singapore main island, we can apply the following code. 

```{r}
eldercare[!unlist(st_contains(sgboundary_sf, eldercare)),]
```

```{r}
garden[!unlist(st_contains(sgboundary_sf, garden)),]
```

In the above codes, we are checking for eldercare and garden records that are not contained by sgboundary_sf. 

Since the results return 0 row for both data sets, we are certain these data sets are confined to within Singapore's main island.

# 3 Data Wrangling (Distance Matrix)

## 3.1 Computing Distance Matrix

### 3.1.1 Converting from sf data.table to SpatialPolygonsDataFrame

```{r}
#| eval: false
mpsz_sp <- as(mpsz_sf, "Spatial")
```

```{r}
#| eval: false
#| echo: false
write_rds(mpsz_sp, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz_sp.rds")
```

```{r}
#| echo: false
mpsz_sp <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz_sp.rds")
```

```{r}
mpsz_sp
```

#### 3.1.1.1 Eldercare Centres

```{r}
#| eval: false
eldercare_sp <- as(eldercare, "Spatial")
```

```{r}
#| eval: false
#| echo: false
write_rds(eldercare_sp, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_sp.rds")
```

```{r}
#| echo: false
eldercare_sp <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_sp.rds")
```

```{r}
eldercare_sp
```

#### 3.1.1.2 Community gardens

```{r}
#| eval: false
garden_sp <- as(garden, "Spatial")
```

```{r}
#| eval: false
#| echo: false
write_rds(garden_sp, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden_sp.rds")
```

```{r}
#| echo: false
garden_sp <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden_sp.rds")
```

```{r}
garden_sp
```

#### 3.1.1.3 CHAS clinics

```{r}
#| eval: false
chas_sp <- as(chas, "Spatial")
```

```{r}
#| eval: false
#| echo: false
write_rds(chas_sp, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_sp.rds")
```

```{r}
#| echo: false
chas_sp <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_sp.rds")
```

```{r}
chas_sp
```

#### 3.1.1.4 Other amenities

##### 3.1.1.4.1 Extracting amenities types

```{r}
hospital <- amenities %>% filter(fclass == "hospital")
```

```{r}
communitycentre <- amenities %>% filter(fclass == "community_centre")
```

```{r}
park <- amenities %>% filter(fclass == "park")
```

##### 3.1.1.4.2 Converting to SpatialPolygonsDataFrame

```{r}
#| eval: false
hospital_sp <- as(hospital, "Spatial")
```

```{r}
#| eval: false
communitycentre_sp <- as(communitycentre, "Spatial")
```

```{r}
#| eval: false
park_sp <- as(park, "Spatial")
```

```{r}
#| eval: false
#| echo: false
write_rds(hospital_sp, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hospital_sp.rds")
```

```{r}
#| eval: false
#| echo: false
write_rds(communitycentre_sp, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/communitycentre_sp.rds")
```

```{r}
#| eval: false
#| echo: false
write_rds(park_sp, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/park_sp.rds")
```

```{r}
#| echo: false
hospital_sp <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hospital_sp.rds")
```

```{r}
#| echo: false
communitycentre_sp <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/communitycentre_sp.rds")
```

```{r}
#| echo: false
park_sp <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/park_sp.rds")
```

```{r}
hospital_sp
communitycentre_sp
park_sp
```

### 3.1.2 Computing the distance matrix

```{r}
#| eval: false
dist_matrix <- spDists(mpsz_sp, longlat = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(dist_matrix, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/dist_matrix.rds")
```

```{r}
#| echo: false
dist_matrix <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/dist_matrix.rds")
```

```{r}
head(dist_matrix, n = c(10,10))
```

#### 3.1.2.1 Eldercare centres

```{r}
#| eval: false
eldercare_dist_matrix <- spDists(eldercare_sp, longlat = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(eldercare_dist_matrix, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_dist_matrix.rds")
```

```{r}
#| echo: false
eldercare_dist_matrix <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_dist_matrix.rds")
```

```{r}
head(eldercare_dist_matrix, n = c(10,10))
```

#### 3.1.2.2 Community gardens

```{r}
#| eval: false
garden_dist_matrix <- spDists(garden_sp, longlat = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(garden_dist_matrix, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden_dist_matrix.rds")
```

```{r}
#| echo: false
garden_dist_matrix <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden_dist_matrix.rds")
```

```{r}
head(garden_dist_matrix, n = c(10,10))
```

#### 3.1.2.3 CHAS clinics

```{r}
#| eval: false
chas_dist_matrix <- spDists(chas_sp, longlat = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(chas_dist_matrix, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_dist_matrix.rds")
```

```{r}
#| echo: false
chas_dist_matrix <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_dist_matrix.rds")
```

```{r}
head(chas_dist_matrix, n = c(10,10))
```

#### 3.1.2.4 Other amenities (Hospitals, Community Centres, Parks)

Hospitals: 
```{r}
#| eval: false
hospital_dist_matrix <- spDists(hospital_sp, longlat = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(hospital_dist_matrix, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hospital_dist_matrix.rds")
```

```{r}
#| echo: false
hospital_dist_matrix <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hospital_dist_matrix.rds")
```

```{r}
head(hospital_dist_matrix, n = c(10,10))
```

Community Centres:

```{r}
#| eval: false
communitycentre_dist_matrix <- spDists(communitycentre_sp, longlat = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(communitycentre_dist_matrix, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/communitycentre_dist_matrix.rds")
```

```{r}
#| echo: false
communitycentre_dist_matrix <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/communitycentre_dist_matrix.rds")
```

```{r}
head(communitycentre_dist_matrix, n = c(10,10))
```

Parks:

```{r}
#| eval: false
park_dist_matrix <- spDists(park_sp, longlat = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(park_dist_matrix, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/park_dist_matrix.rds")
```

```{r}
#| echo: false
park_dist_matrix <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/park_dist_matrix.rds")
```

```{r}
head(park_dist_matrix, n = c(10,10))
```

### 3.1.3 Labelling column and row headers of a distance matrix **(might not need!)**

```{r}
#| eval: false
#| echo: false
sz_names <- mpsz_sf$SUBZONE
```

```{r}
#| eval: false
#| echo: false
colnames(dist_matrix) <- paste0(sz_names)
rownames(dist_matrix) <- paste0(sz_names)
```

#### 3.1.3.1 Eldercare centres

```{r}
#| eval: false
#| echo: false
eldercare_names <- eldercare$NAME
```

```{r}
#| eval: false
#| echo: false
colnames(eldercare_dist_matrix) <- paste0(eldercare_names)
rownames(eldercare_dist_matrix) <- paste0(eldercare_names)
```

### ?? 3.1.4 Pivoting distance value by SUBZONE name **(might not need!)**

```{r}
#| eval: false
#| echo: false
distPair <- melt(dist_matrix) %>% 
  rename(dist = value) %>%
  rename(origin = Var1) %>%
  rename(dest = Var2)
```

```{r}
#| eval: false
#| echo: false
write_rds(distPair, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/distPair.rds")
```

```{r}
#| eval: false
#| echo: false
distPair <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/distPair.rds")
```

```{r}
#| eval: false
#| echo: false
head(distPair)
```

### ?? 3.1.5 Updating intra-zonal distances **(might not need!)**

```{r}
#| eval: false
#| echo: false
distPair %>% filter(dist > 0) %>%
  summary()
```

From the results, we can see that the minimum distance is 173.8m.

Next, a constant distance of 50m is added into the intra-zones distance.

```{r}
#| eval: false
#| echo: false
distPair$dist <- ifelse(distPair$dist == 0, 50, distPair$dist)
```

The code below can be used to check the result data.frame.

```{r}
#| eval: false
#| echo: false
distPair %>% summary()
```

### 3.1.6 Distance matrix in kilometres

```{r}
#| eval: false
distmat_km <- as.matrix(dist_matrix/1000)
```

```{r}
#| eval: false
#| echo: false
write_rds(distmat_km, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/distmat_km.rds")
```

```{r}
#| echo: false
distmat_km <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/distmat_km.rds")
```

#### 3.1.6.1. Eldercare centres

```{r}
#| eval: false
eldercare_distmat_km <- as.matrix(eldercare_dist_matrix/1000)
```

```{r}
#| eval: false
#| echo: false
write_rds(eldercare_distmat_km, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_distmat_km.rds")
```

```{r}
#| echo: false
eldercare_distmat_km <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/eldercare_distmat_km.rds")
```

```{r}
eldercare_distmat_km
```

#### 3.1.6.2 Community Gardens

```{r}
#| eval: false
garden_distmat_km <- as.matrix(garden_dist_matrix/1000)
```

```{r}
#| eval: false
#| echo: false
write_rds(garden_distmat_km, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden_distmat_km.rds")
```

```{r}
#| echo: false
garden_distmat_km <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/garden_distmat_km.rds")
```

```{r}
garden_distmat_km
```

#### 3.1.6.3 CHAS clinics

```{r}
#| eval: false
chas_distmat_km <- as.matrix(chas_dist_matrix/1000)
```

```{r}
#| eval: false
#| echo: false
write_rds(chas_distmat_km, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_distmat_km.rds")
```

```{r}
#| echo: false
chas_distmat_km <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/chas_distmat_km.rds")
```

```{r}
chas_distmat_km
```

#### 3.1.6.4 Other amenities (Hospital, Community Centres, Parks)

Hospital:

```{r}
#| eval: false
hospital_distmat_km <- as.matrix(hospital_dist_matrix/1000)
```

```{r}
#| eval: false
#| echo: false
write_rds(hospital_distmat_km, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hospital_distmat_km.rds")
```

```{r}
#| echo: false
hospital_distmat_km <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hospital_distmat_km.rds")
```

```{r}
hospital_distmat_km
```

Community Centres:

```{r}
#| eval: false
communitycentre_distmat_km <- as.matrix(communitycentre_dist_matrix/1000)
```

```{r}
#| eval: false
#| echo: false
write_rds(communitycentre_distmat_km, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/communitycentre_distmat_km.rds")
```

```{r}
#| echo: false
communitycentre_distmat_km <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/communitycentre_distmat_km.rds")
```

```{r}
communitycentre_distmat_km
```

Parks:

```{r}
#| eval: false
park_distmat_km <- as.matrix(park_dist_matrix/1000)
```

```{r}
#| eval: false
#| echo: false
write_rds(park_distmat_km, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/park_distmat_km.rds")
```

```{r}
#| echo: false
park_distmat_km <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/park_distmat_km.rds")
```

```{r}
park_distmat_km
```

# 4 Data Preparation (Aspatial Data)

The first step to dealing with our aspatial data is to import it into our R environment. To do so, we can use read_csv() from the readr package.

```{r}
residents <- read.csv("data/respopagesextod2023.csv")
```

```{r}
glimpse(residents)
```

```{r}
unique(residents$AG)
```

Then, to extract only rows that contain residents aged 55 and above, and name this new data set as elderly, we can apply the following code.

```{r}
#| eval: false
elderly <- residents %>% filter(AG %in% c("55_to_59", "60_to_64", "65_to_69", "70_to_74", "75_to_79", "80_to_84", "85_to_89", "90_and_Over"))
```

Next, to summarize the number of population size of elderly according to Planning Area and Subzone, we can apply the following code.

```{r}
#| eval: false
elderly <- elderly %>% group_by(PA, SZ) %>% summarise(sum(Pop))
```

Then, we rename the population size column "sum(Pop)" as 'demand'. This represents the demand for elderly-related services in each planning area and subzone.

```{r}
#| eval: false
elderly <- elderly %>% rename(demand = `sum(Pop)`)
```

```{r}
#| eval: false
#| echo: false
write_rds(elderly, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/elderly.rds")
```

```{r}
#| echo: false
elderly <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/elderly.rds")
```

```{r}
elderly
```

# 5 Joining geospatial and aspatial data 

```{r}
mpsz_sf
```

```{r}
elderly
```

```{r}
#| eval: false
elderly$PA <- toupper(elderly$PA)
```

```{r}
#| eval: false
elderly$SZ <- toupper(elderly$SZ)
```

```{r}
#| eval: false
mpsz_demand <- left_join(mpsz_sf, elderly, by = c('SUBZONE' = 'SZ', 'PLAN_AREA' = 'PA'))
```

```{r}
#| eval: false
#| echo: false
write_rds(mpsz_demand, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz_demand.rds")
```

```{r}
#| echo: false
mpsz_demand <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/mpsz_demand.rds")
```

# 6 Creating hexagon data 

#### 6.1 Making a hexagon object

```{r}
#| eval: false
hexagons <- st_make_grid(mpsz_sf, cellsize = 250, what = "polygons", square = FALSE)
```

```{r}
#| eval: false
#| echo: false
write_rds(hexagons, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hexagons.rds")
```

```{r}
#| echo: false
hexagons <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hexagons.rds")
```

```{r}
#| eval: false
plot(st_geometry(hexagons))
```

## 6.2 Deriving hexagon of Singapore main island

To get the hexagon of Singapore main island,

```{r}
hexagon <- hexagons %>% st_intersection(mpsz_sf)
```

```{r}
#| eval: false
#| echo: false
write_rds(hexagon, "/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hexagon.rds")
```

```{r}
#| echo: false
hexagon <- readRDS("/Users/binhui-ong/IS415-GAA/Take-home_Ex/Take-home_Ex03/data/rds/hexagon.rds")
```

```{r}
plot(st_geometry(hexagon))
```

## 6.3 Inserting attributes into hexagon 

**Step 1: Converting hexagon into sf object**

We can use glimpse() to gain an understanding of the structure of hexagon.

```{r}
glimpse(hexagon)
```

Alternatively, we can use class() to determine the object class of hexagon.

```{r}
class(hexagon)
```

From the results, we see that hexagon is in sfc class. To convert it into an sf object for easier manipulation, we can use st_sf() as shown in the following code, and name the new sf object as hexagon_sf.

```{r}
#| eval: false
hexagon_sf <- hexagon %>% st_sf()
```

```{r}
#| eval: false
#| echo: false
write_rds(hexagon_sf, "data/rds/hexagon_sf.rds")
```

```{r}
#| echo: false
hexagon_sf <- readRDS("data/rds/hexagon_sf.rds")
```

```{r}
head(hexagon_sf,10)
```

```{r}
#| eval: false
#| echo: false
plot(st_geometry(hexagon_sf))
```

**Step 2: Inserting planning area and subzone names**

Here, we use st_join() and st_within() from sf package to combine the aggregated demand for each subzone into the hexagon_sf data frame. 

```{r}
hexagon_demand <- st_join(hexagon_sf, mpsz_demand, st_within)
```

```{r}
#| eval: false
#| echo: false
write_rds(hexagon_demand, "data/rds/hexagon_demand.rds")
```

```{r}
#| echo: false
hexagon_demand <- readRDS("data/rds/hexagon_demand.rds")
```

```{r}
#| eval: false
#| echo: false
plot(st_geometry(hexagon_demand))
```

Since many hexagons can make up a single subzone, and the current demand field in the hexagon_demand represents the demand for one entire subzone, we have to divide the aggregated demand across the different hexagons in each subzone. 

To do so, we first find out the numner of hexagons contained in each subzone by using the following code.

```{r}
#| eval: false
#| echo: false
hexagon_count <- st_drop_geometry(hexagon_demand) %>% count(SUBZONE)
```

```{r}
#| eval: false
#| echo: false
write_rds(hexagon_count, "data/rds/hexagon_count.rds")
```

```{r}
#| echo: false
hexagon_count <- readRDS("data/rds/hexagon_count.rds")
```

Then, we use left_join() from dplyr to include the total number of hexagons sharing the same subzone as the hexagon of that row.

```{r}
#| eval: false
#| echo: false
hexagon_demand_sf <- left_join(hexagon_demand, hexagon_count)
```

```{r}
#| eval: false
#| echo: false
write_rds(hexagon_demand_sf, "data/rds/hexagon_demand_sf.rds")
```

```{r}
#| echo: false
hexagon_demand_sf <- readRDS("data/rds/hexagon_demand_sf.rds")
```

```{r}
hexagon_demand_sf
```

Next, we divide the aggregated demand by the number of hexagons sharing the same subzone. The new field, hexagon_demand, indicates the average demand of the particular hexagon. 

```{r}
hexagondemand_sf <- hexagon_demand_sf %>% mutate(hexagon_demand = ceiling(demand/n))
```

```{r}
#| eval: false
#| echo: false
write_rds(hexagondemand_sf, "data/rds/hexagondemand_sf.rds")
```

```{r}
#| echo: false
hexagondemand_sf <- readRDS("data/rds/hexagondemand_sf.rds")
```

```{r}
eldercare <- eldercare %>% mutate(capacity = 2500)
```


# 5 Modelling and Visualizing Accesssibility using Hansen Method *(requires hexagon)*

## 5.1 Computing Hansen's accessibility (requires hexagon)

```{r}
eldercare_acc_hansen <- data.frame(ac(hexagondemand_sf$hexagon_demand,
                                      eldercare$capacity,
                                      eldercare_distmat_km,
                                      power = 2,
                                      family = "Hansen"))
```

```{r}
colnames(eldercare_acc_hansen) <- "accHansen"
```

```{r}
eldercare_acc_hansen <- as_tibble(eldercare_acc_hansen)
```

```{r}
#| eval: false
#| echo: false
write_rds(eldercare_acc_hansen, "data/rds/eldercare_acc_hansen.rds")
```

```{r}
#| echo: false
eldercare_acc_hansen <- readRDS("data/rds/eldercare_acc_hansen.rds")
```

**stuck here**
```{r}
#| eval: false
#| echo: false
eldercare_hexagon_hansen <- bind_cols(hexagondemand_sf, eldercare_acc_hansen)
```

## 5.2 Visualizing Hansen's accessibility

### 5.2.1 Extracting map extend (requires hexagon)

```{r}

```

```{r}

```

### 5.3 Statistical graphic visualization