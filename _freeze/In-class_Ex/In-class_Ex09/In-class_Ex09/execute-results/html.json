{
  "hash": "b1c7dcf5d9cb995e192585e302faed5f",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 9: Geographically Weighted Predictive Models\"\nformat: \n  html: \n    code-fold: true\n    code-summary: \"Show the code\"\nexecute:\n  freeze: true\n  warning: false\neditor: visual\ndate: \"March 18, 2024\"\n---\n\n\n# 1 Installing and loading R Packages\n\nThis code chunk performs 3 tasks:\n\n-   A list called packages will be created and will consists of all the R packages required to accomplish this exercise.\n\n-   Check if R packages on package have been installed in R and if not, they will be installed.\n\n-   After all the R packages have been installed, they will be loaded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, \n               tmap, rsample, tidyverse, tidymodels, gtsummary, rpart, rpart.plot, ggstatsplot, performance)\n```\n:::\n\n\nNew packages:\n\n-   rpart and rpart.plot for recursive partitioning\n\n# 2 Data Preparation\n\n## 2.1 Reading rds data sets into R\n\nReading the input data sets. It is in simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_sf <- read_rds(\"data/rds/HDB_resale.rds\")\n```\n:::\n\n\nNext, the code chunk below is used to reveal the properties of *rs_sf* object.\n\n## 2.2 Converting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(\n  rs_sf,\n  prop = 5/10,)\ntrain_sf <- training(resale_split)\ntest_sf <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## 2.3 Retrieving\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_df <- train_sf %>%\n  st_drop_geometry() %>%\n  as.data.frame()\n\ntest_df <- test_sf %>%\n  st_drop_geometry() %>%\n  as.data.frame()\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nTo check our object classes,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(train_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nclass(train_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\n# 3 Computing Correlation Matrix\n\nBefore, ???\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_sf1 <- rs_sf %>% \n  st_drop_geometry()\nggcorrmat(rs_sf1[,2:17])\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n\nThe above is for the purpose of applying statistical learning.\n\n# 4 Building a non-spatial multiple linear regression\n\n## 4.1 Revising mlr model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_df <- train_df %>%\n  select(-c(PROX_CHAS))\ntrain_sf <- train_sf %>%\n  select(-c(PROX_CHAS))\n\ntest_df <- test_df %>%\n  select(-c(PROX_CHAS))\ntest_sf <- test_sf %>%\n  select(-c(PROX_CHAS))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_mlr <- lm(formula = RESALE_PRICE ~.,\n                data=train_df)\n```\n:::\n\n\nAs seen from the above code, we can use \\~. instead of listing all of the independent variables to include them in the formula.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(rs_sf)\ncoords_train <- st_coordinates(train_sf)\ncoords_test <- st_coordinates(test_sf)\n```\n:::\n\n\n# 5 Calibrating Predictive Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_rp <- rpart(formula = RESALE_PRICE ~., data = train_df)\nrs_rp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nn= 7950 \n\nnode), split, n, deviance, yval\n      * denotes terminal node\n\n 1) root 7950 1.139546e+14 433705.6  \n   2) PROX_CBD>=7.974483 6665 4.472144e+13 403736.0  \n     4) REMAINING_LEASE_MTHS< 1020.5 4228 1.573100e+13 370187.4  \n       8) PROX_GOOD_PRISCH>=3.629405 2271 3.851141e+12 340796.1 *\n       9) PROX_GOOD_PRISCH< 3.629405 1957 7.641480e+12 404294.6 *\n     5) REMAINING_LEASE_MTHS>=1020.5 2437 1.597594e+13 461940.1  \n      10) PROX_CBD>=10.40657 2331 9.762718e+12 451754.4  \n        20) PROX_GOOD_PRISCH>=4.866983 1123 2.801796e+12 423493.8 *\n        21) PROX_GOOD_PRISCH< 4.866983 1208 5.230246e+12 478026.4 *\n      11) PROX_CBD< 10.40657 106 6.532500e+11 685929.1 *\n   3) PROX_CBD< 7.974483 1285 3.219685e+13 589151.4  \n     6) REMAINING_LEASE_MTHS< 930.5 745 6.613365e+12 486637.6  \n      12) FLOOR_AREA_SQM< 98.5 451 2.446537e+12 442460.5 *\n      13) FLOOR_AREA_SQM>=98.5 294 1.936449e+12 554405.7 *\n     7) REMAINING_LEASE_MTHS>=930.5 540 6.952722e+12 730582.5  \n      14) REMAINING_LEASE_MTHS< 1071.5 314 2.461969e+12 676641.3 *\n      15) REMAINING_LEASE_MTHS>=1071.5 226 2.307737e+12 805527.4 *\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrpart.plot(rs_rp)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# 6 Calibrating Random Forest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_rf <- ranger(formula = RESALE_PRICE ~.,\n                data = train_df,\n                importance = \"impurity\")\nrs_rf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRanger result\n\nCall:\n ranger(formula = RESALE_PRICE ~ ., data = train_df, importance = \"impurity\") \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      7950 \nNumber of independent variables:  15 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       744504952 \nR squared (OOB):                  0.9480664 \n```\n:::\n:::\n\n\nNotes:\n\n-   *Very important*:  importance is retained using ranger() \n\n-   \"impurity\" is always used first in regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvi <- as.data.frame(rs_rf$variable.importance)\n\nvi$variables <- rownames(vi)\nvi <- vi %>%\n  rename(vi = \"rs_rf$variable.importance\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = vi, \n       aes(x=vi, \n           y = reorder(variables, vi))) +\n  geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nNotes:\n\n-   stat = identity treats every row as a single observation\n-   if only one variable has an extremely high vi, while all other variables have extremely low vi, there could be complete separation issue! To resolve the issue, we must exclude the variable with the extreme high vi first, and then check if the other variables work well without it.\n\nTo compute the Geographically Weighted Random Forest, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_grf <- grf(formula = RESALE_PRICE ~., data = train_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrs_grf <- readRDS(\"data/models/rs_grf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_df <- cbind(test_sf, coords_test) %>% \n  st_drop_geometry()\n```\n:::\n\n\n\n# 7 Predicting with test data \nNext, predict.grf() of spatialML package will be used to predict the resale value by using the test data and gwRF_adaptive model calibrated earlier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(rs_grf,\n                        test_df,\n                        x.var.name = \"X\",\n                        y.var.name, \n                        local.w = 1, \n                        global.w = 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- readRDS(\"data/models/grf_pred.rds\")\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n\nIn the code chunk below, cbind() is used to append the predicted values onto test_df.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- test_df %>%\n  select(RESALE_PRICE) %>%\n  cbind(grf_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rs_rf, test_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- cbind(test_pred, rf_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr_pred <- predict(rs_mlr, test_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmlr_pred_df <- as.data.frame(mlr_pred) %>%\n  rename(mlr_pred = \"mlr_pred\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- cbind(test_pred, mlr_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_pred <- readRDS(\"data/models/test_pred.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyardstick::rmse(test_pred,\n                RESALE_PRICE,\n                grf_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      28745.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyardstick::rmse(test_pred,\n                RESALE_PRICE,\n                rf_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      28970.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyardstick::rmse(test_pred,\n                RESALE_PRICE,\n                mlr_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      61617.\n```\n:::\n:::\n\n\nAmong the methods, \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc <- test_pred %>% pivot_longer(cols = c(2:4),\n                                 names_to = \"models\",\n                                 values_to = \"predicted\")\n```\n:::\n\n\n# 8 Visualizing the predicted values\n\nAlternatively, scatterplot can be used to visualize the actual resale price and the predicted resale price by using the code chunk below.\n\nFor grf_pred, \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=test_pred,\n       aes(x = grf_pred,\n           y = RESALE_PRICE)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nFor rf_pred, \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=test_pred,\n       aes(x = rf_pred,\n           y = RESALE_PRICE)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\nFor mlr_pred, \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=test_pred,\n       aes(x = mlr_pred,\n           y = RESALE_PRICE)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex09_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}