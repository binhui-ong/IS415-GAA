---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
execute:
  warning: false
date: "January 10, 2024"
---

# 1.1 Overview

In this exercise, we will delve into the processes of importing, transforming and analyzing geospatial and apatial data in R with the use of sf and tidyverse packages.

# 1.2 Data Acquisition

To begin our exercise, we need to have data on hand. Hence, we would be extracting the following data sets, to be used in later sections, from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from data.gov.sg

-   Pre-Schools Location from data.gov.sg

-   Cycling Path from LTADataMall

-   Latest Version of Singapore Airbnb listing data from Inside Airbnb

# 1.3 Getting Started

## Installing and Loading R Packages

Next, I will install and load tidyverse and sf packages using p_load() from the pacman package. The pacman package is useful to load multiple packages at once!

```{r}
pacman::p_load(tidyverse, sf)
```

# 1.4 Importing Geospatial Data

Then, I will import the data sets that we would be working on with st_read() from sf package.

## Importing geospatial data: shapefile format

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MP14_SUBZONE_WEB_PL")

cyclingpath <- st_read(dsn = "data/geospatial",
                       layer = "CyclingPathGazette")
```

## Importing geospatial data: kml format

```{r}
preschool <- st_read(dsn = "data/geospatial/PreSchoolsLocation.kml")
```

# 1.5 Checking the Content of a Simple Feature Data Frame

In this section, we will retrieve information about the content of a simple feature data frame using different methods.

## 1.5.1 Working with st_geometry()

Besides mpsz\$geom and mpsz, we can retrieve the geometry list-column in an sf data.frame using st_geometry().

```{r}
st_geometry(mpsz)
```

This would display only basic information of the feature class such as type of geometry, geographic extent of the features, and coordinate system of the data.

## 1.5.2 Working with glimpse()

We can also learn more about the associated attribute information in the data frame using glimpse(0) of dplyr.

```{r}
glimpse(mpsz)
```

## 1.5.3. Working with head()

To find out complete information of a feature object, we can use head() of Base R.

```{r}
head(mpsz, n=5)
```

# 1.6 Plotting the Geospatial Data

To visualize the geospatial features, we can use plot() of R Graphic.

```{r}
plot(mpsz)
```

By default, the plot of an sf object is a multi-plot of all attributes up to a reasonable maximum as shown above.

However, we can choose to plot only the geometry with the following code chunk:

```{r}
plot(st_geometry(mpsz))
```

We can also plot the sf object by using a specific attribute as shown below:

```{r}
plot(mpsz["PLN_AREA_N"])
```

# 1.7 Working with Projection

## 1.7.1 Assigning EPSG code to a simple feature data frame

We use st_crs() from the sf package to retrieve the coordinate reference system for an object.

```{r}
st_crs(mpsz)
```

We see that the EPSG assigned to mpsz is 9001. However, the EPSG for svy21 is actually 3414.

Hence, we have to assign a new EPSG to mpsz. We define the updated mpsz as mpsz3414 using st_set_crs() from the sf package.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Let's check that the EPSG is correct now.

```{r}
st_crs(mpsz3414)
```

## 1.7.2 Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, we often transform the original data from geographic coordinate system to projected coordinate system. This facilitates analysis involving distance and/or area measurements.

As seen earlier in 1.5.1, the preschool simple feature data frame shows that it is in wgs84 coordinate system.

To perform the projection transformation,

```{r}
preschool3414 <- st_transform(preschool, crs =3414)
```

The new preschool3414 data frame is as follows:

```{r}
#| echo: false
preschool3414
```

Yay! The preschool location data is in svy projected coordinate system now.

Additionally, looking at the Bounding box, the values are larger than the 0-360 decimal degree commonly used by most of the geographic coordinate systems.

# 1.8 Importing and Converting Aspatial Data

Sometimes, we encounter data such as the listing of Inside Airbnb. This type of data is aspatial data: it is not a geospatial data but among its data fields, there are two fields that capture the x- and y- coordinates of the data points.

## 1.8.1 Importing Aspatial Data

As the data is in csv format, we will use read_csv() of readr package to import listing.csv. The output R object is called listings and it is a tibble data frame.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

To check if the data file has been imported correctly, we can also use list() of Base R to check the tibble data frame.

```{r}
list(listings)
```

The output reveals that listing tibble data frame consists of 3,457 rows and 18 columns.

Two useful fields we are going to use in the next phase are latitude and longitude. As they are in the decimal degree format, we could assume that the data is in wgs84 Geographic Coordinate System.

## 1.8.2 Creating a simple feature data frame from an aspatial data frame

The following code chunk converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages.

```{r}
listings_sf <- st_as_sf(listings, 
                        coords = c("longitude", "latitude"),
                        crs=4326) |>
  st_transform(crs=3414)
```

```{r}
glimpse(listings_sf)
```

# 1.9 Geoprocessing with sf Package

## 1.9.1 Buffering

Case: The authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tassked to determine the extent of land to be acquired and their total area.

Solution:

Step 1: Compute the 5-meter buffers around cycling paths with st_buffer() of sf package.

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)
```

Step 2: Calculate the area of the buffers with st_area() of sf package.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Step 3: Derive the total land involved with sum() of Base R.

```{r}
sum(buffer_cycling$AREA)
```

TADAH! We're done!

## 1.9.2 Point-in-polygon count

Case: A pre-school service group wants to find out the number of pre-schools in each Planning Subzome.

Solution:

Step 1:

```{r}
mpsz3414$'PreSch Count' <- lengths(st_intersects (mpsz3414, preschool3414))
```

Step 2:

```{r}
summary(mpsz3414$'PreSch Count')
```

Step 3:

```{r}
top_n(mpsz3414, 1, 'PreSch Count')
```

**Additional Question: Calculate the density of pre-school by planning subzone.**

Solution:

Step 1: Derive the area of each planning subzone with st_area() from sf package.

```{r}
mpsz3414$Area <- mpsz3414 |>
                st_area()
```

Step 2: Compute the density with mutate() of dplyr package.

```{r}
mpsz3414 <- mpsz3414 |>
        mutate(`PreSch Density` = (`PreSch Count`/Area * 1000000))
```

# 1.10 Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, we will use appropriate ggplot2 functions to create functional and yet truthful statistic graphs for EDA purposes.

Step 1: Plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$'PreSch Density')
```

Though the syntax is easy to use, the output does not meet publication quality. Also, the function has limited room for further customization.

Step 2: Hence, we employ ggplot2 functions instead.

```{r}
ggplot(data=mpsz3414,
       aes(x=as.numeric(`PreSch Density`))) +
  geom_histogram(bins=20, 
                 color = "black", 
                 fill = "light blue") + 
  labs(title = "Are pre-schools evenly distributed in Singapore?",
       subtitle = "There are many planning sub-zones with a single pre-school. On the other hand, there are two planning sub-zones with at least 20 pre-schools.",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

**Additional Question: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.**

Solution:

```{r}
ggplot(data=mpsz3414,
       aes(y=`PreSch Count`,
           x= as.numeric(`PreSch Density`))) + 
  geom_point(color="black", 
             fill = "light blue") +
  xlim(0,40) +
  ylim(0,40) +
  labs(title="",
       x = "Pre-school density (per km sq)",
       y = "Pre-school count")
```

***The End***
